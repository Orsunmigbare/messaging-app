{"version":3,"sources":["components/Sidebar.js","Qurey.js","uri.js","context/Message.js","components/ComposeMessage.js","components/TransitionElement.js","components/ViewMessages.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","id","href","class","to","Component","getRequest","ID","URL","Promise","resolve","reject","Axios","get","headers","then","res","data","catch","err","message","console","log","postRequest","parameters","post","Query","create_user","send_message","edit_message","get_messages","delete_message","MessageContext","React","createContext","MessageProvider","Consumer","state","title","update_mesage","a","setState","value","update_message","this","Provider","props","children","Compose","context","loading","response_message","message_id","className","htmlFor","type","onChange","e","target","aria-describedby","placeholder","rows","defaultValue","onClick","window","location","reload","style","marginLeft","contextType","TransitionElement","CSSTransition","in","timeout","classNames","transClass","unmountOnExit","child","ViewMessages","messages","message_index","findIndex","x","_id","splice","history","push","$","tooltip","length","map","d","data-toggle","data-placement","withRouter","App","path","exact","match","ComposeMessage","params","Boolean","hostname","ReactDOM","render","Message","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.01bd3911.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Link} from 'react-router-dom';\n\nclass Sidebar extends Component {\n    render() {\n        return (\n          <div id=\"sidebar\">\n          <header>\n            <a href=\"#\">My App</a>\n          </header>\n          <ul class=\"nav\">\n            <li class=\"nav-item w-100\">\n              <Link to=\"/\" class=\"nav-link\">\n                <i class=\"zmdi zmdi-mail-send\"></i> Send Message\n              </Link>\n            </li>\n            <li class=\"nav-item w-100\">\n              <Link to=\"/view\" class=\"nav-link\">\n                <i class=\"zmdi zmdi-eye\"></i> View Messages Sent\n              </Link>\n            </li>\n          </ul>\n        </div>\n        );\n    }\n}\n\nexport default Sidebar;","\nimport Axios from \"axios\";\nimport {\n    GET_MESSAGES,\n    BASE_URL,\n    SEND_MESSAGE,\n    CREATE_USER,\n    DELETE_MESSAGE,\n    EDIT_MESSAGE\n} from './uri'\nconst getRequest = ({ URL }, ID) => {\n    return new Promise((resolve, reject) => {\n        Axios.get(`${BASE_URL}${URL}${ID ? `/${ID}` : ''}`, { headers: { \"Content-Type\": 'application/json' } })\n            .then(res => {\n                resolve(res.data)\n            }).catch(err => {\n                if (err.message === 'Request failed with status code 403') {\n                    console.log(err)\n                    reject(err)\n                }\n\n            })\n    })\n\n}\n\nconst postRequest = ({ URL, parameters }) => {\n    return new Promise((resolve, reject) => {\n        Axios.post(`${BASE_URL}${URL}`,\n            parameters,\n            { headers: { \"Content-Type\":  'application/json' } }\n        ).then(res => {\n            resolve(res.data)\n        }).catch(err => {\n            console.log(err)\n            reject(err)\n        })\n    })\n\n\n}\n\nclass Query  {\n    static create_user = (parameters) => {\n        return postRequest({ URL: CREATE_USER, parameters })\n    }\n\n    static send_message = (parameters) => {\n        return postRequest({ URL: SEND_MESSAGE, parameters })\n    }\n    static edit_message = (parameters) => {\n        return postRequest({ URL: EDIT_MESSAGE, parameters })\n    }\n    static get_messages = () => {\n        return getRequest({ URL: GET_MESSAGES })\n    }\n\n    static delete_message = (ID) => {\n        return getRequest({ URL: DELETE_MESSAGE }, ID)\n    }\n\n\n}\n\n\nexport default Query;\n","// export const BASE_URL = 'http://127.0.0.1:3000/api/';\nexport const BASE_URL = '/api/';\nexport const GET_MESSAGES = 'get_messages';\nexport const SEND_MESSAGE = 'send_message';\nexport const CREATE_USER = 'create_user';\nexport const DELETE_MESSAGE = 'delete_message';\nexport const EDIT_MESSAGE = 'edit_message';","import React, {Component} from 'react';\n\nexport const MessageContext = React.createContext({})\nexport const MessageConsumer = MessageContext.Consumer;\n\nclass MessageProvider extends Component {\n    state = {\n        message: '',\n        title: '',\n        id: ''\n    }\n    update_mesage = async (message,title,id)=>{await this.setState({message,title,id});}\n    render(){\n        let value = {\n            update_message: this.update_mesage,\n            message: this.state\n        }\n        return(\n            <MessageContext.Provider value={value}>\n                {this.props.children}\n            </MessageContext.Provider>\n        )\n    }\n}\n\nexport default MessageProvider;","import React, { Component } from 'react';\nimport Query from '../Qurey';\nimport {MessageContext} from '../context/Message'\n\nclass Compose extends Component {\n    static contextType = MessageContext;\n    state = {\n        title : '',\n        message: '',\n        id: '',\n        context: 'send',\n        loading: false,\n        response_message: ''\n    }\n\n   componentDidMount(){\n       let context = this.context\n       let {message} = context;\n       if(message.id){\n            this.setState({title: message.title, message: message.message, context: 'update', id: message.id})\n       }\n   }\n    send_message = ()=>{\n        let {context} = this.state;\n       \n        this.setState({loading: 'true'})\n        let {title,message,id} = this.state;\n        if(!title && !message) return\n        context === 'send'  ? Query.send_message({title,message})\n        .then((res)=>{\n            this.setState({loading: false,response_message: res.message})\n        })\n        .catch((err)=>{\n            this.setState({loading: false, response_message: err.message})\n        })\n        :\n        Query.edit_message({message, message_id: id,title}).then((res)=>{\n            this.setState({loading: false, response_message: res.message})\n        })\n        .catch((err)=>{\n            this.setState({loading: false, response_message: err.message})\n        })\n    }\n    \n    render() {\n        let {message,id,title,context, response_message} = this.state;\n        return (\n            <div id=\"content\">\n                <div className=\"container-fluid\">\n                    <h1>Compose Message</h1>\n                   \n                        <div className=\"form-group\">\n                            <label htmlFor=\"msg_title\">Title</label>\n                            <input value={title || ''} type=\"text\" onChange={(e)=>{this.setState({title: e.target.value})}} className=\"form-control\" id=\"msg_title\" aria-describedby=\"emailHelp\" placeholder=\"Enter message title\" />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"msg_content\">Write message</label>\n                            <textarea value ={message || ''} className=\"form-control\" onChange={(e)=>{this.setState({message: e.target.value})}} id=\"msg_content\" rows={3} defaultValue={\"\"} />\n                        </div>\n                        <p>{response_message}</p>\n                        <button onClick={this.send_message} className=\"btn btn-primary\">{context === 'update' ? 'Update': 'Send'}</button>\n                        {context === 'update' ? <button onClick={()=>{window.location.reload()}} style={{marginLeft: 20}} className=\"btn btn-primary\">Compose new New</button>: null}\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default Compose;","import React, {Component} from 'react';\nimport {CSSTransition} from 'react-transition-group';\n\nclass TransitionElement extends Component {\n    render(){\n        return(\n        <CSSTransition\n          in = {this.props.in}\n          timeout = {300}\n          classNames = {this.props.transClass}\n          unmountOnExit \n          >\n         {this.props.child}\n          </CSSTransition>\n        )\n    }\n}\n\nexport default TransitionElement","import React, { Component } from 'react';\nimport Query from '../Qurey';\nimport {withRouter} from 'react-router-dom';\nimport {MessageContext} from '../context/Message'\n\nclass ViewMessages extends Component {\n  static contextType = MessageContext;\n    state = {\n      messages : [],\n      loading: false,\n      response_message: ''\n    }\n    componentDidMount(){\n        let $ = window.$;\n        $('[data-toggle=\"tooltip\"]').tooltip()\n        this.setState({loading: 'true'})\n        Query.get_messages().then((res)=>{\n          this.setState({loading: false, response_message: res.message})\n          this.setState({messages: res.data})\n        })\n        .catch((err)=>{\n          this.setState({loading: false, response_message: err.message})\n        })\n    }\n    delete_message = (id)=>{\n      let {messages} = this.state\n       this.setState({loading: 'true'})\n       Query.delete_message(id)\n       .then((res)=>{\n        let message_index  = messages.findIndex(x=>(x._id === id));\n         messages.splice(message_index,)\n         this.setState({messages, response_message: res.message})\n        })\n       .catch((err)=>{\n        this.setState({loading: false,response_message: err.message})\n       })\n    }\n    edit_message = (message)=>{\n      this.context.update_message(message.message,message.title,message._id)\n      this.props.history.push(`/`)\n    }\n\n    render() {\n      let {messages,loading} = this.state;\n        return (\n           \n            <div id=\"content\">\n            <div class=\"container-fluid\">\n              <h1>View Sent Message</h1>\n              {messages.length ?   <ul class='messages'>\n                {\n                  messages.map((message)=>(\n                    <li>\n                  <div class=\"message\">\n                  <div class='cancel-delete-btn' d><i onClick = {()=>{this.edit_message(message)}} class=\"zmdi zmdi-edit white-tooltip\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Edit message\"  ></i>|<i class=\"zmdi zmdi-delete white-tooltip\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Delete message\" onClick = {()=>{this.delete_message(message._id)}} ></i></div>\n                 <h3> {message.title}</h3>\n                     <p> {message.message}</p>\n                  </div>\n                </li> \n                  )) \n                } </ul> : <p>No messages to display</p>}\n            </div>\n          </div>\n        );\n    }\n}\n\nexport default withRouter(ViewMessages);","import React from 'react';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport Route from 'react-router-dom/Route';\nimport SideBar from './components/Sidebar';\nimport ComposeMessage from './components/ComposeMessage';\nimport TransitionElement from './components/TransitionElement'\nimport ViewMessages from './components/ViewMessages';\n\nfunction App() {\n  return (\n    <div id=\"viewport\">\n      <Router>\n        <SideBar/>\n        <Route\n        path = {'/'}\n        exact = {true}\n        >\n        {({match})=>(\n            <TransitionElement\n            in = {match != null}\n            transClass = {'page'}\n            child = { <ComposeMessage/>}\n            />\n          )}\n        </Route>\n        <Route\n        path = {'/edit/:id'}\n        exact = {true}\n        >\n        {({match})=>(\n            <TransitionElement\n            in = {match != null}\n            transClass = {'page'}\n            child = { <ComposeMessage id={match ? match.params.id :null}/>}\n            />\n          )}\n        </Route>\n        {/* <Route\n        path = {'/edit'}\n        exact = {true}\n        >\n        {({match})=>(\n            <TransitionElement\n            in = {match != null}\n            transClass = {'page'}\n            child = {<EditMessages/>}\n            />\n          )}\n        </Route> */}\n        <Route\n        path = {'/view'}\n        exact = {true}\n        >\n        {({match})=>(\n            <TransitionElement\n            in = {match != null}\n            transClass = {'page'}\n            child = { <ViewMessages/>}\n            />\n          )}\n        </Route>\n        {/* <Route\n        path = {'/delete'}\n        exact = {true}\n        >\n        {({match})=>(\n            <TransitionElement\n            in = {match != null}\n            transClass = {'page'}\n            child = {<DeleteMessages/>}\n            />\n          )}\n          </Route> */}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport MessageProvider from './context/Message'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MessageProvider><App /></MessageProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}